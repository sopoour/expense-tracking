{"version":3,"sources":["components/Expenses/ExpenseDate.js","components/UI/styles.js","components/Expenses/ExpenseItem.js","components/Expenses/ExpensesList.js","components/Expenses/ExpensesFilter.js","components/Chart/ChartBar.js","components/Chart/Chart.js","components/Expenses/ExpensesChart.js","components/Expenses/Expenses.js","components/NewExpense/ExpenseForm.js","components/NewExpense/NewExpense.js","App.js","index.js"],"names":["ExpenseDateContainer","styled","div","ExpenseDate","props","month","date","toLocaleString","day","year","getFullYear","style","fontSize","fontWeight","Button","button","Card","ExpenseItemCard","ExpenseDescription","ExpenseItem","title","amount","ExpensesListContainer","ul","ExpensesListContainerFallback","h2","ExpensesList","items","length","map","item","id","ExpenseFilterContainer","ExpensesFilter","value","selected","onChange","event","onChangeFilter","target","ChartBarContainer","ChartBarInner","ChartBarFilled","fillHeight","ChartBarLabel","ChartBar","barFillHight","maxValue","Math","round","label","ChartContainer","Chart","dataPointValues","dataPoints","dataPoint","totalMaximum","max","ExpensesChart","chartDataPoints","Array","from","i","Date","console","log","expenses","expense","getMonth","ExpensesCard","Expenses","useState","filteredYear","setfilteredYear","filteredExpenses","filter","parseInt","selectedYear","FormControl","FormControlItem","ExpenseForm","userInput","setUserInput","handleChange","name","prevState","toLowerCase","onSubmit","preventDefault","expenseData","onSaveExpenseData","type","min","step","onClick","onCancel","NewExpenseContainer","open","NewExpense","isOpen","setIsOpen","enteredExpenseData","random","toString","onAddExpense","DUMMY_EXPENSES","App","setExpenses","prevExpenses","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.40d2601b.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst ExpenseDateContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 5.5rem;\n  height: 5.5rem;\n  border: 1px solid #ececec;\n  background-color: #2a2a2a;\n  color: white;\n  border-radius: 12px;\n  align-items: center;\n  justify-content: center;\n`;\n\n//To-Do: how can I incorporate the styling of the month, day and year stylings within the above styled component?\n\nconst ExpenseDate = (props) => {\n  const month = props.date.toLocaleString(\"en-US\", { month: \"long\" });\n  const day = props.date.toLocaleString(\"en-US\", { day: \"2-digit\" });\n  const year = props.date.getFullYear();\n\n  return (\n    <ExpenseDateContainer>\n      <div style={{fontSize: '0.75rem', fontWeight: 'bold'}} >{month}</div>\n      <div style={{fontSize: '1.5rem', fontWeight: 'bold'}}>{day}</div>\n      <div style={{fontSize: '0.75rem'}}>{year}</div>\n    </ExpenseDateContainer>\n  );\n};\n\nexport default ExpenseDate;\n","import styled from \"styled-components\";\n\nexport const Button = styled.button`\n  font: inherit;\n  cursor: pointer;\n  padding: 1rem 2rem;\n  border: 1px solid #40005d;\n  background-color: #40005d;\n  color: white;\n  border-radius: 12px;\n  margin-right: 1rem;\n\n  &:hover,\n  &:active {\n    background-color: #510674;\n    border-color: #510674;\n  }\n`;\n\nexport const Card = styled.div`\n  border-radius: 12px;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n`;\n\n","import ExpenseDate from \"./ExpenseDate\";\nimport { Card } from \"../UI/styles\";\nimport styled from \"styled-components\";\n\nconst ExpenseItemCard = styled(Card)`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 0.5rem;\n  margin: 1rem 0;\n  background-color: #4b4b4b;\n\n  & h2 {\n    color: #3a3a3a;\n    font-size: 1rem;\n    flex: 1;\n    margin: 0 1rem;\n    color: white;\n  }\n`;\n\nconst ExpenseDescription = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n  align-items: flex-end;\n  flex-flow: column-reverse;\n  justify-content: flex-start;\n  flex: 1;\n\n  & div {\n    font-size: 1rem;\n    font-weight: bold;\n    color: white;\n    background-color: #40005d;\n    border: 1px solid white;\n    padding: 0.5rem;\n    border-radius: 12px;\n  }\n\n  @media (min-width: 580px) {\n    flex-direction: row;\n    align-items: center;\n    justify-content: flex-start;\n    flex: 1;\n\n    & h2 {\n      font-size: 1.25rem;\n    }\n\n    & div {\n      font-size: 1.25rem;\n      padding: 0.5rem 1.5rem;\n    }\n  }\n`;\n\nconst ExpenseItem = (props) => {\n  /*This is a stateless/dumb component cuz it doesn't have an interal state*/\n\n  //But it is just there to output some data\n  return (\n    <li>\n      <ExpenseItemCard>\n        <ExpenseDate date={props.date} />\n        <ExpenseDescription>\n          <h2>{props.title}</h2>\n          <div>{props.amount}</div>\n        </ExpenseDescription>\n      </ExpenseItemCard>\n    </li>\n  );\n};\n\nexport default ExpenseItem;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport ExpenseItem from \"./ExpenseItem\";\n\nconst ExpensesListContainer = styled.ul`\n  list-style: none;\n  padding: 0;\n`;\n\nconst ExpensesListContainerFallback = styled.h2`\n  color: white;\n  text-align: center;\n`;\n\nconst ExpensesList = (props) => {\n  //Add a conditional return statement that returns a different JSX code when the condition is met\n  if (props.items.length === 0) {\n    return <ExpensesListContainerFallback>Found no expenses.</ExpensesListContainerFallback>;\n  }\n\n  //the below return statement will be automatically rendered if the above if statement is not met\n  //if what your component returns changes entirely based on a specific condition you can use this approac\n  //it's not appropriate when only parts of the JSX content changes (like when we would have use this within the Expenses component)\n  //therefore it's good to have this conditional content as separate component and insert it in Expenses component\n  return (\n    <ExpensesListContainer>\n      {props.items.map((item) => (\n        <ExpenseItem\n          key={item.id}\n          title={item.title}\n          amount={item.amount}\n          date={item.date}\n        />\n      ))}\n    </ExpensesListContainer>\n  );\n};\n\nexport default ExpensesList;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst ExpenseFilterContainer = styled.div`\n  color: white;\n  padding: 0 1rem;\n\n  & div {\n    display: flex;\n    width: 100%;\n    align-items: center;\n    justify-content: space-between;\n    margin: 1rem 0;\n  }\n\n  & label {\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n  }\n\n  & select {\n    font: inherit;\n    padding: 0.5rem 3rem;\n    font-weight: bold;\n    border-radius: 6px;\n  }\n`;\n\nconst ExpensesFilter = (props) => {\n  //in the child component pass the listened event change up to the parent component\n  //Where the changed value is then set to the state\n  const handleDropdownChange = (event) => {\n    props.onChangeFilter(event.target.value);\n  };\n\n  return (\n    <ExpenseFilterContainer>\n      <div>\n        <label>Filter by year</label>\n        <select value={props.selected} onChange={handleDropdownChange}>\n          <option value=\"2022\">2022</option>\n          <option value=\"2021\">2021</option>\n          <option value=\"2020\">2020</option>\n          <option value=\"2019\">2019</option>\n        </select>\n      </div>\n    </ExpenseFilterContainer>\n  );\n};\n\nexport default ExpensesFilter;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst ChartBarContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst ChartBarInner = styled.div`\n  height: 100%;\n  width: 100%;\n  border: 1px solid #313131;\n  border-radius: 12px;\n  background-color: #c3b4f3;\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n`;\n\nconst ChartBarFilled = styled.div`\n  background-color: #4826b9;\n  width: 100%;\n  transition: all 0.3s ease-out;\n  height: ${props => props.fillHeight};\n`;\n\nconst ChartBarLabel = styled.div`\n  font-weight: bold;\n  font-size: 0.5rem;\n  text-align: center;\n`;\n\nconst ChartBar = (props) => {\n  let barFillHight = \"0%\";\n  if (props.maxValue > 0) {\n    barFillHight = Math.round((props.value / props.maxValue) * 100) + \"%\";\n  }\n  return (\n    <ChartBarContainer>\n      <ChartBarInner>\n        <ChartBarFilled fillHeight={barFillHight}></ChartBarFilled>\n      </ChartBarInner>\n      <ChartBarLabel>{props.label}</ChartBarLabel>\n    </ChartBarContainer>\n  );\n};\n\nexport default ChartBar;\n","import React from \"react\";\n\nimport ChartBar from \"./ChartBar\";\n\nimport styled from \"styled-components\";\n\nconst ChartContainer = styled.div`\n  padding: 1rem;\n  border-radius: 12px;\n  background-color: #f8dfff;\n  text-align: center;\n  display: flex;\n  justify-content: space-around;\n  height: 10rem;\n`;\n\nconst Chart = (props) => {\n  //get an own array of just the values for each month\n  const dataPointValues = props.dataPoints.map((dataPoint) => dataPoint.value);\n  //based on that new array we can calculate the maxValue to be passed on as props to ChartBar\n  //use spread operator (...) in order to pull out all the array elements from dataPointValues to be inserted in the List created by Math.max\n  const totalMaximum = Math.max(...dataPointValues);\n  return (\n    <ChartContainer>\n      {/* Create a ChartBar for each dataPoint (12 in total since 12 months*/}\n      {props.dataPoints.map((dataPoint) => (\n        <ChartBar\n          key={dataPoint.label}\n          value={dataPoint.value}\n          maxValue={totalMaximum}\n          label={dataPoint.label}\n        />\n      ))}\n    </ChartContainer>\n  );\n};\n\nexport default Chart;\n","import React from \"react\";\nimport Chart from \"../Chart/Chart\";\n\nconst ExpensesChart = (props) => {\n  //generate all months within a year and insert it as label for each created object\n  const chartDataPoints = Array.from({ length: 12 }, (item, i) => {\n    return {\n      label: new Date(0, i).toLocaleString(\"en-US\", { month: \"short\" }),\n      value: 0,\n    };\n  });\n\n  /**\n   * OutPut: \n   * (12) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\n    0: {label: 'Jan', value: 0}\n    1: {label: 'Feb', value: 0}\n    2: {label: 'Mar', value: 0}\n    3: {label: 'Apr', value: 0}\n    4: {label: 'May', value: 0}\n    5: {label: 'Jun', value: 0}\n    6: {label: 'Jul', value: 0}\n    7: {label: 'Aug', value: 0}\n    8: {label: 'Sep', value: 0}\n    9: {label: 'Oct', value: 0}\n    10: {label: 'Nov', value: 0}\n    11: {label: 'Dec', value: 0}\n    length: 12\n    [[Prototype]]: Array(0)\n   */\n\n  console.log(chartDataPoints);\n\n  //loop through each expense in the expenses array\n  for (const expense of props.expenses) {\n    //get the month from the date props of the respectively looped expense\n    const expenseMonth = expense.date.getMonth(); // starting at 0 => January\n    //update value for the extracted month of that expense in the new array by increasing the value by the amount of the respectively looped expense\n    chartDataPoints[expenseMonth].value += expense.amount;\n  }\n\n  return <Chart dataPoints={chartDataPoints} />;\n};\n\nexport default ExpensesChart;\n","import React, { useState } from \"react\";\nimport ExpensesList from \"./ExpensesList\";\nimport ExpensesFilter from \"./ExpensesFilter\";\nimport ExpensesChart from \"./ExpensesChart\";\nimport { Card } from \"../UI/styles\";\nimport styled from \"styled-components\";\n\n//Extend the Card styled component with additional properties\nconst ExpensesCard = styled(Card)`\n  padding: 1rem;\n  background-color: rgb(31, 31, 31);\n  margin: 2rem auto;\n  width: 50rem;\n  max-width: 95%;\n`;\n\nconst Expenses = (props) => {\n  /* This is a stateful/smart component */\n\n  //always handle the actual state management within the parent component\n  //Then pass down the state and the state handler change\n  const [filteredYear, setfilteredYear] = useState(\"2020\");\n\n  const handleChangedFilter = (selectedYear) => {\n    setfilteredYear(selectedYear);\n  };\n\n  //filter based on the selected year:\n  const filteredExpenses = props.items.filter((expense) => {\n    return expense.date.getFullYear() === parseInt(filteredYear);\n  });\n\n  /* \n  More complex solution that is not really necessary to utalize since all we need to do is manupluate \n  the already coming in data and add a condition of what should be rendered (aka filter)\n\n  const [filteredResult, setFilteredResult] = useState(props.items);\n\n  useEffect(() => {\n    (async () => {\n      const results = await props.items.filter((value) => {\n        return value.date.getFullYear() == parseInt(filteredYear);\n      });\n      setFilteredResult(results);\n    })();\n  }, [props.items, filteredYear]); */\n\n  //By handling it like this, the ExpensesFilter is the component controlled by the Expenses component\n\n  return (\n    <ExpensesCard>\n      <ExpensesFilter\n        selected={filteredYear}\n        onChangeFilter={handleChangedFilter}\n      />\n      <ExpensesChart expenses={filteredExpenses} />\n      <ExpensesList items={filteredExpenses} />\n    </ExpensesCard>\n  );\n};\n\nexport default Expenses;\n","import React, { useState } from \"react\";\nimport { Button } from \"../UI/styles\";\nimport styled from \"styled-components\";\n\nconst FormControl = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 1rem;\n  margin-bottom: 1rem;\n  text-align: left;\n`;\n\nconst FormControlItem = styled.div`\n  & label {\n    font-weight: bold;\n    margin-bottom: 0.5rem;\n    display: block;\n  }\n\n  & input {\n    font: inherit;\n    padding: 0.5rem;\n    border-radius: 6px;\n    border: 1px solid #ccc;\n    width: 20rem;\n    max-width: 100%;\n  }\n`;\n\nconst ExpenseForm = (props) => {\n  const [userInput, setUserInput] = useState({\n    title: \"\",\n    amount: \"\",\n    date: \"\",\n  });\n\n  const handleChange = (event) => {\n    //Take name and value from event object to dynamically insert below in [name]: value depending on which field is changed\n    const { name, value } = event.target;\n    //copy the object of newExpense state and set the name and value depending on which input is changed ([name])\n    //if your state depends on the previous state, use the arrow function to pass prevState\n    setUserInput((prevState) => ({\n      //to not overwrite the other attributes/make them empty that are not changed but copy them in your new object, use spread operator \"...prevState\"\n      ...prevState,\n      //make lower case of name to match the attributes of state object since the name in the event is the same as the <label> which has capitel letter first\n      [name.toLowerCase()]: value,\n    }));\n  };\n\n  const handleSubmit = (event) => {\n    //prevent that request is sent and that the page reloads when I click on \"add expense\" button\n    event.preventDefault();\n    //create new object where I convert the string date into date object\n    //To-Do: figure out a way where I can already do it as soon as it's submitted within the state object userInput\n    const expenseData = {\n      title: userInput.title,\n      amount: +userInput.amount, //+ is the same as parseInt()\n      date: new Date(userInput.date),\n    };\n\n    props.onSaveExpenseData(expenseData);\n\n    //set the values back to being empty\n    setUserInput({\n      title: \"\",\n      amount: \"\",\n      date: \"\",\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl>\n        <FormControlItem>\n          <label>Title</label>\n          <input\n            type=\"text\"\n            value={userInput.title}\n            onChange={handleChange}\n            name=\"Title\"\n          />\n        </FormControlItem>\n        <FormControlItem>\n          <label>Amount</label>\n          <input\n            type=\"number\"\n            value={userInput.amount}\n            min=\"0.01\"\n            step=\"0.01\"\n            onChange={handleChange}\n            name=\"Amount\"\n          />\n        </FormControlItem>\n        <FormControlItem>\n          <label>Date</label>\n          <input\n            type=\"date\"\n            value={userInput.date}\n            min=\"2019-01-01\"\n            max=\"2022-12-31\"\n            onChange={handleChange}\n            name=\"Date\"\n          />\n        </FormControlItem>\n      </FormControl>\n      <Button type=\"cancel\" onClick={props.onCancel}>\n        Cancel\n      </Button>\n      <Button type=\"submit\">Add Expense</Button>\n    </form>\n  );\n};\n\nexport default ExpenseForm;\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport ExpenseForm from \"./ExpenseForm\";\nimport { Button } from \"../UI/styles\";\n\nconst NewExpenseContainer = styled.div`\n  background-color: #a892ee;\n  padding: 1rem;\n  margin: 2rem auto;\n  width: 50rem;\n  max-width: 95%;\n  border-radius: 12px;\n  //align buttons dependent whether form is open or closed\n  text-align: ${props => props.open ? 'right' : 'center'};\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.25);\n`;\n\n\nconst NewExpense = (props) => {\n  //function is called within the ExpenseForm when submitting the expense and gets the expenseData passed to it\n  const handleSaveExpense = (enteredExpenseData) => {\n    const expenseData = {\n      ...enteredExpenseData,\n      //add an id attribute to the object\n      id: Math.random().toString(),\n    };\n    props.onAddExpense(expenseData);\n    setIsOpen(false);\n  };\n\n  const [isOpen, setIsOpen] = useState(false);\n\n  const handleOpenForm = () => {\n    setIsOpen(true);\n  };\n\n  const handleCloseForm = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <NewExpenseContainer open={isOpen}>\n      {!isOpen && (\n        <Button onClick={handleOpenForm}>\n          Add New Expense\n        </Button>\n      )}\n      {isOpen && (\n        <ExpenseForm\n          onCancel={handleCloseForm}\n          onSaveExpenseData={handleSaveExpense}\n        />\n      )}\n    </NewExpenseContainer>\n  );\n};\n\nexport default NewExpense;\n","import React, { useState } from \"react\";\n\nimport Expenses from \"./components/Expenses/Expenses\";\nimport NewExpense from \"./components/NewExpense/NewExpense\";\n\nconst DUMMY_EXPENSES = [\n  {\n    id: \"e1\",\n    title: \"Toilet Paper\",\n    amount: 94.12,\n    date: new Date(2020, 7, 14),\n  },\n  {\n    id: \"e2\",\n    title: \"New TV\",\n    amount: 799.49,\n    date: new Date(2021, 2, 12),\n  },\n  {\n    id: \"e3\",\n    title: \"Car Insurance\",\n    amount: 294.67,\n    date: new Date(2021, 2, 28),\n  },\n  {\n    id: \"e4\",\n    title: \"New Desk (Wooden)\",\n    amount: 450,\n    date: new Date(2021, 5, 12),\n  },\n];\n\nfunction App() {\n  const [expenses, setExpenses] = useState(DUMMY_EXPENSES);\n\n\n  const handleAddExpense = (expense) => {\n    //setState methods are aynch and React is batching various setStates from differnt positions\n    //when you update your state dependent on the previous state then you should use an updater function instad of object or array\n    //So DON'T write: setExpenses([expense, ...prevExpenses])\n    setExpenses(prevExpenses => {\n      return [expense, ...prevExpenses];\n    });\n    console.log(\"In App.js\");\n    console.log(expense);\n  };\n\n  return (\n    <div>\n      <NewExpense onAddExpense={handleAddExpense} />\n      <Expenses items={expenses} />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}